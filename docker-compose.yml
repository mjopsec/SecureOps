version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secureops-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: secureops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secureops123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d secureops"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: secureops-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: secureops-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: secureops
      DB_USER: postgres
      DB_PASSWORD: secureops123
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRE: 7d
      BCRYPT_ROUNDS: 10
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX: 100
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      # Mount source code but not node_modules
      - ./backend/src:/app/src:ro
      - ./backend/migrations:/app/migrations:ro
      - ./backend/scripts:/app/scripts:ro
      - ./backend/server.js:/app/server.js:ro
      - ./backend/.env:/app/.env:ro
      # Writable directories
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - secureops-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  # Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: secureops-frontend
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - secureops-network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: secureops-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@secureops.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - secureops-network
    depends_on:
      - postgres

networks:
  secureops-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  pgadmin-data:
  backend-uploads:
  backend-logs: